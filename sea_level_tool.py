# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SeaLevelTool
                                 A QGIS plugin
 This allows you to adjust sea level according to sea level curves
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-23
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Patrick Morrison
        email                : patrick.morrison@research.uwa.edu.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QTimer
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QSpinBox
from qgis.core import QgsProject, QgsMapLayerProxyModel, QgsExpressionContextUtils
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
from PyQt5.QtWidgets import QApplication
import numpy as np
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .sea_level_tool_dockwidget import SeaLevelToolDockWidget
import os.path



class SeaLevelTool:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SeaLevelTool_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SeaLevelTool')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'SeaLevelTool')
        self.toolbar.setObjectName(u'SeaLevelTool')

        #print "** INITIALIZING SeaLevelTool"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SeaLevelTool', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sea_level_tool/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Sea Level Curve'),
            callback=self.run,
            parent=self.iface.mainWindow())
        

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING SeaLevelTool"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD SeaLevelTool"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SeaLevelTool'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar
    
    def adjust_levels(self, type, moved_value):
        level_box = self.dockwidget.level.value()
        level_slider = self.dockwidget.level_slider.value()

        if type == 'slider':
            self.dockwidget.level_slider.sliderMoved.disconnect()
            self.dockwidget.level_slider.setValue(level_box)
            self.dockwidget.level_slider.sliderMoved.connect(lambda v: self.adjust_levels('box', v))

        if type == 'box':
            self.dockwidget.level.valueChanged.disconnect()
            self.dockwidget.level.setValue(level_slider)
            self.dockwidget.level.valueChanged.connect(lambda v: self.adjust_levels("slider", v))

    def adjust_ages(self, type, moved_value):
        age_box = self.dockwidget.age.value()
        age_slider = self.dockwidget.age_slider.value()

        if type == 'slider':
            self.dockwidget.age_slider.sliderMoved.disconnect()
            self.dockwidget.age_slider.setValue(age_box)
            self.dockwidget.age_slider.sliderMoved.connect(lambda v: self.adjust_ages('box', v))

        if type == 'box':
            self.dockwidget.age.valueChanged.disconnect()
            self.dockwidget.age.setValue(age_slider)
            self.dockwidget.age.valueChanged.connect(lambda v: self.adjust_ages("slider", v))

    def set_level_max(self, v):
        self.dockwidget.level.setMaximum(v)
        self.dockwidget.level_min.setMaximum(v)
        self.dockwidget.level_slider.setMaximum(v)
    def set_level_min(self, v):
        self.dockwidget.level.setMinimum(v)
        self.dockwidget.level_max.setMinimum(v)
        self.dockwidget.level_slider.setMinimum(v)

    def set_oldest(self, v):
        self.dockwidget.age.setMaximum(v)
        self.dockwidget.youngest.setMaximum(v)
        self.dockwidget.age_slider.setMaximum(v)
    def set_youngest(self, v):
        self.dockwidget.level.setMinimum(v)
        self.dockwidget.oldest.setMinimum(v)
        self.dockwidget.age_slider.setMinimum(v)
    
    def msl(self):
        global total_change
        total_change = 0
    
    def render(self):
        self.iface.mapCanvas().saveAsImage(f"/Users/patrickmorrison/Downloads/render/render_{total_change}.png")

    def animate(self, range):

        for step in range:
            self.change_sea(step)
            self.iface.mapCanvas().refreshAllLayers()
            QApplication.processEvents()
            self.render
            QApplication.processEvents()
            

    def change_sea(self, level):
        try:
            global total_change
            sea_level = level-total_change

            global bath

            items = bath.renderer().shader().rasterShaderFunction().colorRampItemList()
                
            for item in items:
                item.value += sea_level
                    
            total_change += sea_level
            self.h_bar.setPos(total_change)
            QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sea_level',total_change)
                
            bath.renderer().shader().rasterShaderFunction().setColorRampItemList(items)
            bath.triggerRepaint()
            bath.emitStyleChanged()

        except NameError:
            print('No elevation data')

    def select_raster_fields(self):
        global bath
        self.change_sea(0)
        self.dockwidget.level.setValue(0)
        bath = self.dockwidget.raster_layer_box.currentLayer()
        print(bath)

    def select_curve_fields(self):
        global curve

        data = self.dockwidget.curve_layer_box.currentLayer()
        if data:
            curve = {}
            for feature in data.getFeatures():
                age = float(feature["age"])
                level = float(feature["sea_level"])
                curve[age] = level
        else:
             curve = {0: 0, 10:0, 20:-120, 30:-100, 40:-80,50:-70,60:-70,70:-80,80:-50,90:-50,100:-30,110:-50,120:-10,130:5}

        self.dockwidget.level_min.setValue(min(list(curve.values())))
        self.dockwidget.level_max.setValue(max(list(curve.values())))
        self.dockwidget.oldest.setValue(max(list(curve.keys())))
        self.dockwidget.youngest.setValue(min(list(curve.keys())))

        if self.dockwidget.interp_check.isChecked():
            global curve_interp
            x = list(range(self.dockwidget.youngest.value(), self.dockwidget.oldest.value()+1, 1))
            y = np.interp(x, list(curve.keys()), list(curve.values()))
            curve = dict(zip(x, y))
        
        pen = pg.mkPen(color=(0, 0, 0), width=3)
        graph = self.dockwidget.curve_graph
        graph.clear()
        graph.plot(list(curve.keys()),list(curve.values()), symbol='o', pen=pen, symbolSize=10)
        graph.addItem(self.h_bar)
        graph.addItem(self.v_bar)


    def update_curve(self):
        global total_change
        total_change = 0

    def change_age(self, age):
        closest_age = min(curve, key=lambda x:abs(x-age))
        self.dockwidget.level.setValue(curve[closest_age])
        QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'age',age)
        self.v_bar.setPos(age)
        

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING SeaLevelTool"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)

            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = SeaLevelToolDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.BottomDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
        
        global bath
        #bath = QgsProject.instance().mapLayersByName('bath')[0]
        self.dockwidget.raster_layer_box.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dockwidget.raster_layer_box.layerChanged.connect(self.select_raster_fields)
        self.dockwidget.raster_layer_box.setCurrentIndex(0)
        #bath = self.dockwidget.raster_layer_box.currentLayer()
        self.msl()

        self.dockwidget.curve_layer_box.setFilters(QgsMapLayerProxyModel.NoGeometry)
        self.dockwidget.curve_layer_box.layerChanged.connect(self.select_curve_fields)
        self.dockwidget.curve_layer_box.setCurrentIndex(0)

        
        #Set title decoration to [% @sea_level %]m
        project = QgsProject.instance()
        global sea_level
        QgsExpressionContextUtils.setProjectVariable(project,'sea_level',total_change)

        self.dockwidget.render_button.clicked.connect(self.render)

        max = self.dockwidget.level_max.value()
        min = self.dockwidget.level_min.value()
        steps = list(range(min, max, 1))

        self.dockwidget.animate_button.clicked.connect(lambda: self.animate(steps))

        #sea_level_data = QgsProject.instance().mapLayersByName('sea_level_curve_basic')[0]


        global curve
        curve = {0: 0, 10:0, 20:-120, 30:-100, 40:-80,50:-70,60:-70,70:-80,80:-50,90:-50,100:-30,110:-50,120:-10,130:5}
        self.dockwidget.interp_check.stateChanged.connect(self.select_curve_fields)

        pen = pg.mkPen(color=(0, 0, 0), width=3)
        graph = self.dockwidget.curve_graph
        graph.plot(list(curve.keys()),list(curve.values()), symbol='o', pen=pen, symbolSize=10)
        styles = {'color':'b', 'font-size':'12px'}
        graph.setLabel('left', 'Sea level (m)', **styles)
        graph.setLabel('bottom', 'Age (ka)', **styles)
        graph.showGrid(x=True, y=True)
        graph.invertX(True)
        current_pen = pg.mkPen(color='b', width=2, style=QtCore.Qt.DotLine)
        self.h_bar = pg.InfiniteLine(movable=False, angle=0,pos=0,pen=current_pen)
        graph.addItem(self.h_bar)
        self.v_bar = pg.InfiniteLine(movable=False, angle=90,pos=0,pen=current_pen)
        graph.addItem(self.v_bar)

        self.dockwidget.level.valueChanged.connect(lambda v: self.change_sea(v))
        self.dockwidget.level_slider.valueChanged.connect(lambda v: self.change_sea(v))

        self.dockwidget.level.valueChanged.connect(lambda v: self.adjust_levels('slider', v))
        self.dockwidget.level_slider.sliderMoved.connect(lambda v: self.adjust_levels("box", v))

        self.dockwidget.age.valueChanged.connect(lambda v: self.adjust_ages('slider', v))
        self.dockwidget.age_slider.sliderMoved.connect(lambda v: self.adjust_ages("box", v))

        self.dockwidget.level_min.valueChanged.connect(lambda v: self.set_level_min(v))
        self.dockwidget.level_max.valueChanged.connect(lambda v: self.set_level_max(v))

        self.dockwidget.age.valueChanged.connect(lambda v: self.change_age(v))
        self.dockwidget.age_slider.valueChanged.connect(lambda v: self.change_age(v))

        self.dockwidget.oldest.valueChanged.connect(lambda v: self.set_oldest(v))
        self.dockwidget.youngest.valueChanged.connect(lambda v: self.set_youngest(v))
